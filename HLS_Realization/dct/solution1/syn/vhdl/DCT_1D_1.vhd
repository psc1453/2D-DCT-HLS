-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DCT_1D_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input1_ce0 : OUT STD_LOGIC;
    input1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input2_ce0 : OUT STD_LOGIC;
    input2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input3_ce0 : OUT STD_LOGIC;
    input3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input4_ce0 : OUT STD_LOGIC;
    input4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input5_ce0 : OUT STD_LOGIC;
    input5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input6_ce0 : OUT STD_LOGIC;
    input6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input7_ce0 : OUT STD_LOGIC;
    input7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_offset : IN STD_LOGIC_VECTOR (3 downto 0);
    output_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_0_ce0 : OUT STD_LOGIC;
    output_0_we0 : OUT STD_LOGIC;
    output_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_1_ce0 : OUT STD_LOGIC;
    output_1_we0 : OUT STD_LOGIC;
    output_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_2_ce0 : OUT STD_LOGIC;
    output_2_we0 : OUT STD_LOGIC;
    output_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_3_ce0 : OUT STD_LOGIC;
    output_3_we0 : OUT STD_LOGIC;
    output_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_4_ce0 : OUT STD_LOGIC;
    output_4_we0 : OUT STD_LOGIC;
    output_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_5_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_5_ce0 : OUT STD_LOGIC;
    output_5_we0 : OUT STD_LOGIC;
    output_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_6_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_6_ce0 : OUT STD_LOGIC;
    output_6_we0 : OUT STD_LOGIC;
    output_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_7_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    output_7_ce0 : OUT STD_LOGIC;
    output_7_we0 : OUT STD_LOGIC;
    output_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_offset : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of DCT_1D_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_B50 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000101101010000";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv29_FB1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000111110110001";
    constant ap_const_lv29_D4E : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000110101001110";
    constant ap_const_lv28_8E4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100011100100";
    constant ap_const_lv27_31F : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001100011111";
    constant ap_const_lv27_7FFFCE1 : STD_LOGIC_VECTOR (26 downto 0) := "111111111111111110011100001";
    constant ap_const_lv28_FFFF71C : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111011100011100";
    constant ap_const_lv29_1FFFF2B2 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111001010110010";
    constant ap_const_lv28_FFFF04F : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111000001001111";
    constant ap_const_lv28_1000 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_const_lv29_EC8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000111011001000";
    constant ap_const_lv28_61F : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000011000011111";
    constant ap_const_lv28_FFFF9E1 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111100111100001";
    constant ap_const_lv29_1FFFF138 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111000100111000";
    constant ap_const_lv28_EC8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000111011001000";
    constant ap_const_lv29_1FFFF04F : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111000001001111";
    constant ap_const_lv29_1FFFF71C : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111011100011100";
    constant ap_const_lv29_8E4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100011100100";
    constant ap_const_lv28_FFFF2B2 : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111001010110010";
    constant ap_const_lv29_1FFFF4B0 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111010010110000";
    constant ap_const_lv28_B50 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000101101010000";
    constant ap_const_lv27_61F : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000011000011111";
    constant ap_const_lv27_1000 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_const_lv26_3FFFCE1 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111110011100001";
    constant ap_const_lv26_1000 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal output_offset_read_reg_1203 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal input_offset_cast_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_offset_cast_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln50_2_fu_349_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_3_fu_353_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_5_fu_361_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_6_fu_365_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_7_fu_369_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_9_fu_377_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_10_fu_381_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_11_fu_385_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_13_fu_393_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_15_fu_401_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_17_fu_409_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_19_fu_417_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_21_fu_425_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_22_fu_429_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_23_fu_433_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_25_fu_441_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_26_fu_445_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_27_fu_449_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_30_fu_461_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_7_fu_369_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln50_3_fu_353_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln50_fu_465_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln50_15_fu_401_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln50_11_fu_385_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln50_1_fu_475_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln50_31_fu_471_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln50_32_fu_481_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_2_fu_485_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln50_23_fu_433_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln50_19_fu_417_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln50_3_fu_495_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln50_30_fu_461_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln50_27_fu_449_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln50_4_fu_505_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln50_34_fu_501_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln50_35_fu_511_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_5_fu_515_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_751_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln50_40_fu_535_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_783_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_762_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln52_fu_539_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_792_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_816_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln52_1_fu_547_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_807_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln52_10_fu_542_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln52_10_fu_542_p2 : signal is "no";
    signal add_ln52_14_fu_553_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_14_fu_553_p2 : signal is "no";
    signal add_ln52_1_fu_558_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_831_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_840_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_879_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_861_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_870_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln52_17_fu_575_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_17_fu_575_p2 : signal is "no";
    signal add_ln52_21_fu_582_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_21_fu_582_p2 : signal is "no";
    signal add_ln52_2_fu_586_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_894_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_903_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_942_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_918_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_933_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln52_24_fu_603_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_24_fu_603_p2 : signal is "no";
    signal add_ln52_28_fu_610_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_28_fu_610_p2 : signal is "no";
    signal add_ln52_3_fu_614_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_951_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_966_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1005_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_981_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_996_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln52_31_fu_631_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_31_fu_631_p2 : signal is "no";
    signal add_ln52_35_fu_638_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_35_fu_638_p2 : signal is "no";
    signal add_ln52_4_fu_642_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1014_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1029_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1068_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1050_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1059_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln52_38_fu_659_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_38_fu_659_p2 : signal is "no";
    signal add_ln52_42_fu_666_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_42_fu_666_p2 : signal is "no";
    signal add_ln52_5_fu_670_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1077_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1098_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1131_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_1107_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1122_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln52_45_fu_687_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_45_fu_687_p2 : signal is "no";
    signal add_ln52_49_fu_694_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_49_fu_694_p2 : signal is "no";
    signal add_ln52_6_fu_698_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1140_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln52_8_fu_715_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1155_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1194_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_1185_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_1170_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln52_10_fu_726_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln52_52_fu_718_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_52_fu_718_p2 : signal is "no";
    signal add_ln52_56_fu_729_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln52_56_fu_729_p2 : signal is "no";
    signal add_ln52_7_fu_734_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_751_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_751_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_762_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_2_fu_349_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_762_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_2_fu_770_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_2_fu_770_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_6_fu_365_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_2_fu_770_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_3_fu_777_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_9_fu_377_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln50_3_fu_777_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_783_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln50_3_fu_777_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_792_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln50_6_fu_800_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln50_6_fu_800_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_21_fu_425_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln50_6_fu_800_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_807_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_26_fu_445_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_807_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_816_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_40_fu_535_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_816_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_816_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln50_9_fu_825_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_9_fu_825_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_831_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_5_fu_361_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_831_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln50_9_fu_825_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_840_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_840_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln50_12_fu_848_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_12_fu_848_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_13_fu_393_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_12_fu_848_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_13_fu_855_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_17_fu_409_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_13_fu_855_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_861_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_861_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln50_13_fu_855_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_870_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_25_fu_441_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_870_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_879_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_879_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_879_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln50_17_fu_888_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_17_fu_888_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_894_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln50_17_fu_888_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_903_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_10_fu_381_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_903_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_20_fu_911_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_20_fu_911_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_20_fu_911_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_918_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_918_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_22_fu_926_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_22_fu_926_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_22_fu_429_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_22_fu_926_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_933_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_942_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_942_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_942_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_951_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_951_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_26_fu_959_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_26_fu_959_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_26_fu_959_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_966_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_966_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_28_fu_974_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_28_fu_974_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_28_fu_974_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_981_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_981_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_30_fu_989_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_30_fu_989_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_30_fu_989_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_996_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_996_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1005_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1005_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1005_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1014_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1014_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_34_fu_1022_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_34_fu_1022_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_34_fu_1022_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1029_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln50_36_fu_1037_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_36_fu_1037_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_36_fu_1037_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_37_fu_1044_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_37_fu_1044_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1050_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln50_37_fu_1044_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1059_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1059_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1068_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1068_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1068_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1077_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln50_42_fu_1085_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_42_fu_1085_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_42_fu_1085_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_43_fu_1092_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_43_fu_1092_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1098_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln50_43_fu_1092_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_1107_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln50_46_fu_1115_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_46_fu_1115_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_46_fu_1115_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1122_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1122_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1131_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1131_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1140_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln50_50_fu_1148_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln50_50_fu_1148_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_50_fu_1148_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1155_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1155_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_52_fu_1163_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_52_fu_1163_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_52_fu_1163_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1170_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1170_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln50_54_fu_1178_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln50_54_fu_1178_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln50_54_fu_1178_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1185_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1185_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1194_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1194_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_reset_start_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component DCT_ama_addmuladdbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mul_mul_16s_1dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mul_mul_16s_1eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component DCT_mac_muladd_16fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component DCT_mac_muladd_16g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component DCT_mul_mul_16s_1hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component DCT_mac_muladd_16ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component DCT_mac_muladd_16kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mul_mul_16s_1mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component DCT_mac_muladd_16pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component DCT_mac_muladd_16vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component DCT_mac_muladd_16wdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component DCT_mac_muladd_16xdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    DCT_ama_addmuladdbkb_U17 : component DCT_ama_addmuladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        din2_WIDTH => 13,
        din3_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        din0 => add_ln50_2_fu_485_p2,
        din1 => add_ln50_5_fu_515_p2,
        din2 => grp_fu_751_p2,
        din3 => grp_fu_751_p3,
        dout => grp_fu_751_p4);

    DCT_mac_muladd_16cud_U18 : component DCT_mac_muladd_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_762_p0,
        din1 => grp_fu_762_p1,
        din2 => mul_ln50_2_fu_770_p2,
        dout => grp_fu_762_p3);

    DCT_mul_mul_16s_1dEe_U19 : component DCT_mul_mul_16s_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_2_fu_770_p0,
        din1 => mul_ln50_2_fu_770_p1,
        dout => mul_ln50_2_fu_770_p2);

    DCT_mul_mul_16s_1eOg_U20 : component DCT_mul_mul_16s_1eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln50_3_fu_777_p0,
        din1 => mul_ln50_3_fu_777_p1,
        dout => mul_ln50_3_fu_777_p2);

    DCT_mac_muladd_16fYi_U21 : component DCT_mac_muladd_16fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => input3_q0,
        din1 => grp_fu_783_p1,
        din2 => mul_ln50_3_fu_777_p2,
        dout => grp_fu_783_p3);

    DCT_mac_muladd_16g8j_U22 : component DCT_mac_muladd_16g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => input4_q0,
        din1 => grp_fu_792_p1,
        din2 => mul_ln50_6_fu_800_p2,
        dout => grp_fu_792_p3);

    DCT_mul_mul_16s_1hbi_U23 : component DCT_mul_mul_16s_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln50_6_fu_800_p0,
        din1 => mul_ln50_6_fu_800_p1,
        dout => mul_ln50_6_fu_800_p2);

    DCT_mac_muladd_16ibs_U24 : component DCT_mac_muladd_16ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 28,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_807_p0,
        din1 => grp_fu_807_p1,
        din2 => grp_fu_816_p3,
        dout => grp_fu_807_p3);

    DCT_mac_muladd_16jbC_U25 : component DCT_mac_muladd_16jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_816_p0,
        din1 => grp_fu_816_p1,
        din2 => grp_fu_816_p2,
        dout => grp_fu_816_p3);

    DCT_mul_mul_16s_1dEe_U26 : component DCT_mul_mul_16s_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_9_fu_825_p0,
        din1 => mul_ln50_9_fu_825_p1,
        dout => mul_ln50_9_fu_825_p2);

    DCT_mac_muladd_16kbM_U27 : component DCT_mac_muladd_16kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_831_p0,
        din1 => grp_fu_831_p1,
        din2 => mul_ln50_9_fu_825_p2,
        dout => grp_fu_831_p3);

    DCT_mac_muladd_16lbW_U28 : component DCT_mac_muladd_16lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_840_p0,
        din1 => grp_fu_840_p1,
        din2 => mul_ln50_12_fu_848_p2,
        dout => grp_fu_840_p3);

    DCT_mul_mul_16s_1mb6_U29 : component DCT_mul_mul_16s_1mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_12_fu_848_p0,
        din1 => mul_ln50_12_fu_848_p1,
        dout => mul_ln50_12_fu_848_p2);

    DCT_mul_mul_16s_1mb6_U30 : component DCT_mul_mul_16s_1mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_13_fu_855_p0,
        din1 => mul_ln50_13_fu_855_p1,
        dout => mul_ln50_13_fu_855_p2);

    DCT_mac_muladd_16lbW_U31 : component DCT_mac_muladd_16lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_861_p0,
        din1 => grp_fu_861_p1,
        din2 => mul_ln50_13_fu_855_p2,
        dout => grp_fu_861_p3);

    DCT_mac_muladd_16ncg_U32 : component DCT_mac_muladd_16ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 28,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_870_p0,
        din1 => grp_fu_870_p1,
        din2 => grp_fu_879_p3,
        dout => grp_fu_870_p3);

    DCT_mac_muladd_16ocq_U33 : component DCT_mac_muladd_16ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_879_p0,
        din1 => grp_fu_879_p1,
        din2 => grp_fu_879_p2,
        dout => grp_fu_879_p3);

    DCT_mul_mul_16s_1dEe_U34 : component DCT_mul_mul_16s_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_17_fu_888_p0,
        din1 => mul_ln50_17_fu_888_p1,
        dout => mul_ln50_17_fu_888_p2);

    DCT_mac_muladd_16pcA_U35 : component DCT_mac_muladd_16pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => input1_q0,
        din1 => grp_fu_894_p1,
        din2 => mul_ln50_17_fu_888_p2,
        dout => grp_fu_894_p3);

    DCT_mac_muladd_16qcK_U36 : component DCT_mac_muladd_16qcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_903_p0,
        din1 => grp_fu_903_p1,
        din2 => mul_ln50_20_fu_911_p2,
        dout => grp_fu_903_p3);

    DCT_mul_mul_16s_1mb6_U37 : component DCT_mul_mul_16s_1mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_20_fu_911_p0,
        din1 => mul_ln50_20_fu_911_p1,
        dout => mul_ln50_20_fu_911_p2);

    DCT_mac_muladd_16cud_U38 : component DCT_mac_muladd_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_918_p0,
        din1 => grp_fu_918_p1,
        din2 => mul_ln50_22_fu_926_p2,
        dout => grp_fu_918_p3);

    DCT_mul_mul_16s_1dEe_U39 : component DCT_mul_mul_16s_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_22_fu_926_p0,
        din1 => mul_ln50_22_fu_926_p1,
        dout => mul_ln50_22_fu_926_p2);

    DCT_mac_muladd_16rcU_U40 : component DCT_mac_muladd_16rcU
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 28,
        dout_WIDTH => 29)
    port map (
        din0 => input6_q0,
        din1 => grp_fu_933_p1,
        din2 => grp_fu_942_p3,
        dout => grp_fu_933_p3);

    DCT_mac_muladd_16jbC_U41 : component DCT_mac_muladd_16jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_942_p0,
        din1 => grp_fu_942_p1,
        din2 => grp_fu_942_p2,
        dout => grp_fu_942_p3);

    DCT_mac_muladd_16cud_U42 : component DCT_mac_muladd_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_951_p0,
        din1 => grp_fu_951_p1,
        din2 => mul_ln50_26_fu_959_p2,
        dout => grp_fu_951_p3);

    DCT_mul_mul_16s_1mb6_U43 : component DCT_mul_mul_16s_1mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_26_fu_959_p0,
        din1 => mul_ln50_26_fu_959_p1,
        dout => mul_ln50_26_fu_959_p2);

    DCT_mac_muladd_16qcK_U44 : component DCT_mac_muladd_16qcK
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_966_p0,
        din1 => grp_fu_966_p1,
        din2 => mul_ln50_28_fu_974_p2,
        dout => grp_fu_966_p3);

    DCT_mul_mul_16s_1dEe_U45 : component DCT_mul_mul_16s_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_28_fu_974_p0,
        din1 => mul_ln50_28_fu_974_p1,
        dout => mul_ln50_28_fu_974_p2);

    DCT_mac_muladd_16cud_U46 : component DCT_mac_muladd_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_981_p0,
        din1 => grp_fu_981_p1,
        din2 => mul_ln50_30_fu_989_p2,
        dout => grp_fu_981_p3);

    DCT_mul_mul_16s_1mb6_U47 : component DCT_mul_mul_16s_1mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_30_fu_989_p0,
        din1 => mul_ln50_30_fu_989_p1,
        dout => mul_ln50_30_fu_989_p2);

    DCT_mac_muladd_16ibs_U48 : component DCT_mac_muladd_16ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 28,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_996_p0,
        din1 => grp_fu_996_p1,
        din2 => grp_fu_1005_p3,
        dout => grp_fu_996_p3);

    DCT_mac_muladd_16ocq_U49 : component DCT_mac_muladd_16ocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_1005_p0,
        din1 => grp_fu_1005_p1,
        din2 => grp_fu_1005_p2,
        dout => grp_fu_1005_p3);

    DCT_mac_muladd_16cud_U50 : component DCT_mac_muladd_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1014_p0,
        din1 => grp_fu_1014_p1,
        din2 => mul_ln50_34_fu_1022_p2,
        dout => grp_fu_1014_p3);

    DCT_mul_mul_16s_1mb6_U51 : component DCT_mul_mul_16s_1mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_34_fu_1022_p0,
        din1 => mul_ln50_34_fu_1022_p1,
        dout => mul_ln50_34_fu_1022_p2);

    DCT_mac_muladd_16sc4_U52 : component DCT_mac_muladd_16sc4
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => input2_q0,
        din1 => grp_fu_1029_p1,
        din2 => mul_ln50_36_fu_1037_p2,
        dout => grp_fu_1029_p3);

    DCT_mul_mul_16s_1dEe_U53 : component DCT_mul_mul_16s_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_36_fu_1037_p0,
        din1 => mul_ln50_36_fu_1037_p1,
        dout => mul_ln50_36_fu_1037_p2);

    DCT_mul_mul_16s_1mb6_U54 : component DCT_mul_mul_16s_1mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_37_fu_1044_p0,
        din1 => mul_ln50_37_fu_1044_p1,
        dout => mul_ln50_37_fu_1044_p2);

    DCT_mac_muladd_16pcA_U55 : component DCT_mac_muladd_16pcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => input5_q0,
        din1 => grp_fu_1050_p1,
        din2 => mul_ln50_37_fu_1044_p2,
        dout => grp_fu_1050_p3);

    DCT_mac_muladd_16tde_U56 : component DCT_mac_muladd_16tde
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 28,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1059_p0,
        din1 => grp_fu_1059_p1,
        din2 => grp_fu_1068_p3,
        dout => grp_fu_1059_p3);

    DCT_mac_muladd_16jbC_U57 : component DCT_mac_muladd_16jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_1068_p0,
        din1 => grp_fu_1068_p1,
        din2 => grp_fu_1068_p2,
        dout => grp_fu_1068_p3);

    DCT_mac_muladd_16kbM_U58 : component DCT_mac_muladd_16kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => input_r_q0,
        din1 => grp_fu_1077_p1,
        din2 => mul_ln50_42_fu_1085_p2,
        dout => grp_fu_1077_p3);

    DCT_mul_mul_16s_1mb6_U59 : component DCT_mul_mul_16s_1mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_42_fu_1085_p0,
        din1 => mul_ln50_42_fu_1085_p1,
        dout => mul_ln50_42_fu_1085_p2);

    DCT_mul_mul_16s_1dEe_U60 : component DCT_mul_mul_16s_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_43_fu_1092_p0,
        din1 => mul_ln50_43_fu_1092_p1,
        dout => mul_ln50_43_fu_1092_p2);

    DCT_mac_muladd_16lbW_U61 : component DCT_mac_muladd_16lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => input3_q0,
        din1 => grp_fu_1098_p1,
        din2 => mul_ln50_43_fu_1092_p2,
        dout => grp_fu_1098_p3);

    DCT_mac_muladd_16lbW_U62 : component DCT_mac_muladd_16lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => input4_q0,
        din1 => grp_fu_1107_p1,
        din2 => mul_ln50_46_fu_1115_p2,
        dout => grp_fu_1107_p3);

    DCT_mul_mul_16s_1dEe_U63 : component DCT_mul_mul_16s_1dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_46_fu_1115_p0,
        din1 => mul_ln50_46_fu_1115_p1,
        dout => mul_ln50_46_fu_1115_p2);

    DCT_mac_muladd_16udo_U64 : component DCT_mac_muladd_16udo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 27,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1122_p0,
        din1 => grp_fu_1122_p1,
        din2 => grp_fu_1131_p3,
        dout => grp_fu_1122_p3);

    DCT_mac_muladd_16vdy_U65 : component DCT_mac_muladd_16vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 14,
        dout_WIDTH => 27)
    port map (
        din0 => input7_q0,
        din1 => grp_fu_1131_p1,
        din2 => grp_fu_1131_p2,
        dout => grp_fu_1131_p3);

    DCT_mac_muladd_16fYi_U66 : component DCT_mac_muladd_16fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 28,
        dout_WIDTH => 28)
    port map (
        din0 => input_r_q0,
        din1 => grp_fu_1140_p1,
        din2 => mul_ln50_50_fu_1148_p2,
        dout => grp_fu_1140_p3);

    DCT_mul_mul_16s_1hbi_U67 : component DCT_mul_mul_16s_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln50_50_fu_1148_p0,
        din1 => mul_ln50_50_fu_1148_p1,
        dout => mul_ln50_50_fu_1148_p2);

    DCT_mac_muladd_16cud_U68 : component DCT_mac_muladd_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1155_p0,
        din1 => grp_fu_1155_p1,
        din2 => mul_ln50_52_fu_1163_p2,
        dout => grp_fu_1155_p3);

    DCT_mul_mul_16s_1mb6_U69 : component DCT_mul_mul_16s_1mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_52_fu_1163_p0,
        din1 => mul_ln50_52_fu_1163_p1,
        dout => mul_ln50_52_fu_1163_p2);

    DCT_mac_muladd_16cud_U70 : component DCT_mac_muladd_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        din0 => grp_fu_1170_p0,
        din1 => grp_fu_1170_p1,
        din2 => mul_ln50_54_fu_1178_p2,
        dout => grp_fu_1170_p3);

    DCT_mul_mul_16s_1mb6_U71 : component DCT_mul_mul_16s_1mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => mul_ln50_54_fu_1178_p0,
        din1 => mul_ln50_54_fu_1178_p1,
        dout => mul_ln50_54_fu_1178_p2);

    DCT_mac_muladd_16wdI_U72 : component DCT_mac_muladd_16wdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        din2_WIDTH => 26,
        dout_WIDTH => 28)
    port map (
        din0 => grp_fu_1185_p0,
        din1 => grp_fu_1185_p1,
        din2 => grp_fu_1194_p3,
        dout => grp_fu_1185_p3);

    DCT_mac_muladd_16xdS_U73 : component DCT_mac_muladd_16xdS
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        din2_WIDTH => 14,
        dout_WIDTH => 26)
    port map (
        din0 => input7_q0,
        din1 => grp_fu_1194_p1,
        din2 => grp_fu_1194_p2,
        dout => grp_fu_1194_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                output_offset_read_reg_1203 <= output_offset;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_reset_start_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_1_fu_475_p2 <= std_logic_vector(signed(sext_ln50_15_fu_401_p1) + signed(sext_ln50_11_fu_385_p1));
    add_ln50_2_fu_485_p2 <= std_logic_vector(signed(sext_ln50_31_fu_471_p1) + signed(sext_ln50_32_fu_481_p1));
    add_ln50_3_fu_495_p2 <= std_logic_vector(signed(sext_ln50_23_fu_433_p1) + signed(sext_ln50_19_fu_417_p1));
    add_ln50_4_fu_505_p2 <= std_logic_vector(signed(sext_ln50_30_fu_461_p1) + signed(sext_ln50_27_fu_449_p1));
    add_ln50_5_fu_515_p2 <= std_logic_vector(signed(sext_ln50_34_fu_501_p1) + signed(sext_ln50_35_fu_511_p1));
    add_ln50_fu_465_p2 <= std_logic_vector(signed(sext_ln50_7_fu_369_p1) + signed(sext_ln50_3_fu_353_p1));
    add_ln52_10_fu_542_p2 <= std_logic_vector(signed(grp_fu_762_p3) + signed(sext_ln52_fu_539_p1));
    add_ln52_14_fu_553_p2 <= std_logic_vector(signed(sext_ln52_1_fu_547_p1) + signed(grp_fu_807_p3));
    add_ln52_17_fu_575_p2 <= std_logic_vector(signed(grp_fu_831_p3) + signed(grp_fu_840_p3));
    add_ln52_1_fu_558_p2 <= std_logic_vector(unsigned(add_ln52_10_fu_542_p2) + unsigned(add_ln52_14_fu_553_p2));
    add_ln52_21_fu_582_p2 <= std_logic_vector(signed(grp_fu_861_p3) + signed(grp_fu_870_p3));
    add_ln52_24_fu_603_p2 <= std_logic_vector(signed(grp_fu_894_p3) + signed(grp_fu_903_p3));
    add_ln52_28_fu_610_p2 <= std_logic_vector(signed(grp_fu_918_p3) + signed(grp_fu_933_p3));
    add_ln52_2_fu_586_p2 <= std_logic_vector(unsigned(add_ln52_17_fu_575_p2) + unsigned(add_ln52_21_fu_582_p2));
    add_ln52_31_fu_631_p2 <= std_logic_vector(signed(grp_fu_951_p3) + signed(grp_fu_966_p3));
    add_ln52_35_fu_638_p2 <= std_logic_vector(signed(grp_fu_981_p3) + signed(grp_fu_996_p3));
    add_ln52_38_fu_659_p2 <= std_logic_vector(signed(grp_fu_1014_p3) + signed(grp_fu_1029_p3));
    add_ln52_3_fu_614_p2 <= std_logic_vector(unsigned(add_ln52_24_fu_603_p2) + unsigned(add_ln52_28_fu_610_p2));
    add_ln52_42_fu_666_p2 <= std_logic_vector(signed(grp_fu_1050_p3) + signed(grp_fu_1059_p3));
    add_ln52_45_fu_687_p2 <= std_logic_vector(signed(grp_fu_1077_p3) + signed(grp_fu_1098_p3));
    add_ln52_49_fu_694_p2 <= std_logic_vector(signed(grp_fu_1107_p3) + signed(grp_fu_1122_p3));
    add_ln52_4_fu_642_p2 <= std_logic_vector(unsigned(add_ln52_31_fu_631_p2) + unsigned(add_ln52_35_fu_638_p2));
    add_ln52_52_fu_718_p2 <= std_logic_vector(signed(sext_ln52_8_fu_715_p1) + signed(grp_fu_1155_p3));
    add_ln52_56_fu_729_p2 <= std_logic_vector(signed(grp_fu_1170_p3) + signed(sext_ln52_10_fu_726_p1));
    add_ln52_5_fu_670_p2 <= std_logic_vector(unsigned(add_ln52_38_fu_659_p2) + unsigned(add_ln52_42_fu_666_p2));
    add_ln52_6_fu_698_p2 <= std_logic_vector(unsigned(add_ln52_45_fu_687_p2) + unsigned(add_ln52_49_fu_694_p2));
    add_ln52_7_fu_734_p2 <= std_logic_vector(unsigned(add_ln52_52_fu_718_p2) + unsigned(add_ln52_56_fu_729_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_start_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_start = ap_const_logic_1))) then 
            ap_reset_start_pp0 <= ap_const_logic_1;
        else 
            ap_reset_start_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1005_p0 <= sext_ln50_40_fu_535_p1(16 - 1 downto 0);
    grp_fu_1005_p1 <= ap_const_lv28_B50(13 - 1 downto 0);
    grp_fu_1005_p2 <= ap_const_lv28_1000(14 - 1 downto 0);
    grp_fu_1014_p0 <= sext_ln50_2_fu_349_p1(16 - 1 downto 0);
    grp_fu_1014_p1 <= ap_const_lv29_8E4(13 - 1 downto 0);
    grp_fu_1029_p1 <= ap_const_lv27_31F(11 - 1 downto 0);
    grp_fu_1050_p1 <= ap_const_lv27_7FFFCE1(11 - 1 downto 0);
    grp_fu_1059_p0 <= sext_ln50_26_fu_445_p1(16 - 1 downto 0);
    grp_fu_1059_p1 <= ap_const_lv29_FB1(13 - 1 downto 0);
    grp_fu_1068_p0 <= sext_ln50_40_fu_535_p1(16 - 1 downto 0);
    grp_fu_1068_p1 <= ap_const_lv28_FFFF71C(13 - 1 downto 0);
    grp_fu_1068_p2 <= ap_const_lv28_1000(14 - 1 downto 0);
    grp_fu_1077_p1 <= ap_const_lv28_61F(12 - 1 downto 0);
    grp_fu_1098_p1 <= ap_const_lv28_FFFF9E1(12 - 1 downto 0);
    grp_fu_1107_p1 <= ap_const_lv28_FFFF9E1(12 - 1 downto 0);
    grp_fu_1122_p0 <= sext_ln50_26_fu_445_p1(16 - 1 downto 0);
    grp_fu_1122_p1 <= ap_const_lv29_1FFFF138(13 - 1 downto 0);
    grp_fu_1131_p1 <= ap_const_lv27_61F(12 - 1 downto 0);
    grp_fu_1131_p2 <= ap_const_lv27_1000(14 - 1 downto 0);
    grp_fu_1140_p1 <= ap_const_lv27_31F(11 - 1 downto 0);
    grp_fu_1155_p0 <= sext_ln50_10_fu_381_p1(16 - 1 downto 0);
    grp_fu_1155_p1 <= ap_const_lv29_D4E(13 - 1 downto 0);
    grp_fu_1170_p0 <= sext_ln50_17_fu_409_p1(16 - 1 downto 0);
    grp_fu_1170_p1 <= ap_const_lv29_FB1(13 - 1 downto 0);
    grp_fu_1185_p0 <= sext_ln50_25_fu_441_p1(16 - 1 downto 0);
    grp_fu_1185_p1 <= ap_const_lv28_8E4(13 - 1 downto 0);
    grp_fu_1194_p1 <= ap_const_lv26_3FFFCE1(11 - 1 downto 0);
    grp_fu_1194_p2 <= ap_const_lv26_1000(14 - 1 downto 0);
    grp_fu_751_p2 <= ap_const_lv29_B50(13 - 1 downto 0);
    grp_fu_751_p3 <= ap_const_lv29_1000(14 - 1 downto 0);
    grp_fu_762_p0 <= sext_ln50_2_fu_349_p1(16 - 1 downto 0);
    grp_fu_762_p1 <= ap_const_lv29_FB1(13 - 1 downto 0);
    grp_fu_783_p1 <= ap_const_lv27_31F(11 - 1 downto 0);
    grp_fu_792_p1 <= ap_const_lv27_7FFFCE1(11 - 1 downto 0);
    grp_fu_807_p0 <= sext_ln50_26_fu_445_p1(16 - 1 downto 0);
    grp_fu_807_p1 <= ap_const_lv29_1FFFF2B2(13 - 1 downto 0);
    grp_fu_816_p0 <= sext_ln50_40_fu_535_p1(16 - 1 downto 0);
    grp_fu_816_p1 <= ap_const_lv28_FFFF04F(13 - 1 downto 0);
    grp_fu_816_p2 <= ap_const_lv28_1000(14 - 1 downto 0);
    grp_fu_831_p0 <= sext_ln50_5_fu_361_p1(16 - 1 downto 0);
    grp_fu_831_p1 <= ap_const_lv28_61F(12 - 1 downto 0);
    grp_fu_840_p0 <= sext_ln50_9_fu_377_p1(16 - 1 downto 0);
    grp_fu_840_p1 <= ap_const_lv28_FFFF9E1(12 - 1 downto 0);
    grp_fu_861_p0 <= sext_ln50_21_fu_425_p1(16 - 1 downto 0);
    grp_fu_861_p1 <= ap_const_lv28_FFFF9E1(12 - 1 downto 0);
    grp_fu_870_p0 <= sext_ln50_25_fu_441_p1(16 - 1 downto 0);
    grp_fu_870_p1 <= ap_const_lv28_61F(12 - 1 downto 0);
    grp_fu_879_p0 <= sext_ln50_40_fu_535_p1(16 - 1 downto 0);
    grp_fu_879_p1 <= ap_const_lv28_EC8(13 - 1 downto 0);
    grp_fu_879_p2 <= ap_const_lv28_1000(14 - 1 downto 0);
    grp_fu_894_p1 <= ap_const_lv27_7FFFCE1(11 - 1 downto 0);
    grp_fu_903_p0 <= sext_ln50_10_fu_381_p1(16 - 1 downto 0);
    grp_fu_903_p1 <= ap_const_lv29_1FFFF04F(13 - 1 downto 0);
    grp_fu_918_p0 <= sext_ln50_17_fu_409_p1(16 - 1 downto 0);
    grp_fu_918_p1 <= ap_const_lv29_8E4(13 - 1 downto 0);
    grp_fu_933_p1 <= ap_const_lv27_31F(11 - 1 downto 0);
    grp_fu_942_p0 <= sext_ln50_40_fu_535_p1(16 - 1 downto 0);
    grp_fu_942_p1 <= ap_const_lv28_FFFF2B2(13 - 1 downto 0);
    grp_fu_942_p2 <= ap_const_lv28_1000(14 - 1 downto 0);
    grp_fu_951_p0 <= sext_ln50_2_fu_349_p1(16 - 1 downto 0);
    grp_fu_951_p1 <= ap_const_lv29_B50(13 - 1 downto 0);
    grp_fu_966_p0 <= sext_ln50_10_fu_381_p1(16 - 1 downto 0);
    grp_fu_966_p1 <= ap_const_lv29_1FFFF4B0(13 - 1 downto 0);
    grp_fu_981_p0 <= sext_ln50_17_fu_409_p1(16 - 1 downto 0);
    grp_fu_981_p1 <= ap_const_lv29_B50(13 - 1 downto 0);
    grp_fu_996_p0 <= sext_ln50_26_fu_445_p1(16 - 1 downto 0);
    grp_fu_996_p1 <= ap_const_lv29_1FFFF4B0(13 - 1 downto 0);
    input1_address0 <= input_offset_cast_fu_318_p1(3 - 1 downto 0);

    input1_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input1_ce0 <= ap_const_logic_1;
        else 
            input1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input2_address0 <= input_offset_cast_fu_318_p1(3 - 1 downto 0);

    input2_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input2_ce0 <= ap_const_logic_1;
        else 
            input2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input3_address0 <= input_offset_cast_fu_318_p1(3 - 1 downto 0);

    input3_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input3_ce0 <= ap_const_logic_1;
        else 
            input3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input4_address0 <= input_offset_cast_fu_318_p1(3 - 1 downto 0);

    input4_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input4_ce0 <= ap_const_logic_1;
        else 
            input4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input5_address0 <= input_offset_cast_fu_318_p1(3 - 1 downto 0);

    input5_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input5_ce0 <= ap_const_logic_1;
        else 
            input5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input6_address0 <= input_offset_cast_fu_318_p1(3 - 1 downto 0);

    input6_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input6_ce0 <= ap_const_logic_1;
        else 
            input6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input7_address0 <= input_offset_cast_fu_318_p1(3 - 1 downto 0);

    input7_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input7_ce0 <= ap_const_logic_1;
        else 
            input7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_offset_cast_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_offset),64));
    input_r_address0 <= input_offset_cast_fu_318_p1(3 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln50_12_fu_848_p0 <= sext_ln50_13_fu_393_p1(16 - 1 downto 0);
    mul_ln50_12_fu_848_p1 <= ap_const_lv29_1FFFF138(13 - 1 downto 0);
    mul_ln50_13_fu_855_p0 <= sext_ln50_17_fu_409_p1(16 - 1 downto 0);
    mul_ln50_13_fu_855_p1 <= ap_const_lv29_1FFFF138(13 - 1 downto 0);
    mul_ln50_17_fu_888_p0 <= sext_ln50_2_fu_349_p1(16 - 1 downto 0);
    mul_ln50_17_fu_888_p1 <= ap_const_lv29_D4E(13 - 1 downto 0);
    mul_ln50_20_fu_911_p0 <= sext_ln50_13_fu_393_p1(16 - 1 downto 0);
    mul_ln50_20_fu_911_p1 <= ap_const_lv29_1FFFF71C(13 - 1 downto 0);
    mul_ln50_22_fu_926_p0 <= sext_ln50_22_fu_429_p1(16 - 1 downto 0);
    mul_ln50_22_fu_926_p1 <= ap_const_lv29_FB1(13 - 1 downto 0);
    mul_ln50_26_fu_959_p0 <= sext_ln50_6_fu_365_p1(16 - 1 downto 0);
    mul_ln50_26_fu_959_p1 <= ap_const_lv29_1FFFF4B0(13 - 1 downto 0);
    mul_ln50_28_fu_974_p0 <= sext_ln50_13_fu_393_p1(16 - 1 downto 0);
    mul_ln50_28_fu_974_p1 <= ap_const_lv29_B50(13 - 1 downto 0);
    mul_ln50_2_fu_770_p0 <= sext_ln50_6_fu_365_p1(16 - 1 downto 0);
    mul_ln50_2_fu_770_p1 <= ap_const_lv29_D4E(13 - 1 downto 0);
    mul_ln50_30_fu_989_p0 <= sext_ln50_22_fu_429_p1(16 - 1 downto 0);
    mul_ln50_30_fu_989_p1 <= ap_const_lv29_1FFFF4B0(13 - 1 downto 0);
    mul_ln50_34_fu_1022_p0 <= sext_ln50_6_fu_365_p1(16 - 1 downto 0);
    mul_ln50_34_fu_1022_p1 <= ap_const_lv29_1FFFF04F(13 - 1 downto 0);
    mul_ln50_36_fu_1037_p0 <= sext_ln50_13_fu_393_p1(16 - 1 downto 0);
    mul_ln50_36_fu_1037_p1 <= ap_const_lv29_D4E(13 - 1 downto 0);
    mul_ln50_37_fu_1044_p0 <= sext_ln50_17_fu_409_p1(16 - 1 downto 0);
    mul_ln50_37_fu_1044_p1 <= ap_const_lv29_1FFFF2B2(13 - 1 downto 0);
    mul_ln50_3_fu_777_p0 <= sext_ln50_9_fu_377_p1(16 - 1 downto 0);
    mul_ln50_3_fu_777_p1 <= ap_const_lv28_8E4(13 - 1 downto 0);
    mul_ln50_42_fu_1085_p0 <= sext_ln50_6_fu_365_p1(16 - 1 downto 0);
    mul_ln50_42_fu_1085_p1 <= ap_const_lv29_1FFFF138(13 - 1 downto 0);
    mul_ln50_43_fu_1092_p0 <= sext_ln50_10_fu_381_p1(16 - 1 downto 0);
    mul_ln50_43_fu_1092_p1 <= ap_const_lv29_EC8(13 - 1 downto 0);
    mul_ln50_46_fu_1115_p0 <= sext_ln50_22_fu_429_p1(16 - 1 downto 0);
    mul_ln50_46_fu_1115_p1 <= ap_const_lv29_EC8(13 - 1 downto 0);
    mul_ln50_50_fu_1148_p0 <= sext_ln50_5_fu_361_p1(16 - 1 downto 0);
    mul_ln50_50_fu_1148_p1 <= ap_const_lv28_FFFF71C(13 - 1 downto 0);
    mul_ln50_52_fu_1163_p0 <= sext_ln50_13_fu_393_p1(16 - 1 downto 0);
    mul_ln50_52_fu_1163_p1 <= ap_const_lv29_1FFFF04F(13 - 1 downto 0);
    mul_ln50_54_fu_1178_p0 <= sext_ln50_22_fu_429_p1(16 - 1 downto 0);
    mul_ln50_54_fu_1178_p1 <= ap_const_lv29_1FFFF2B2(13 - 1 downto 0);
    mul_ln50_6_fu_800_p0 <= sext_ln50_21_fu_425_p1(16 - 1 downto 0);
    mul_ln50_6_fu_800_p1 <= ap_const_lv28_FFFF71C(13 - 1 downto 0);
    mul_ln50_9_fu_825_p0 <= sext_ln50_2_fu_349_p1(16 - 1 downto 0);
    mul_ln50_9_fu_825_p1 <= ap_const_lv29_EC8(13 - 1 downto 0);
    output_0_address0 <= output_offset_cast_fu_330_p1(3 - 1 downto 0);

    output_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_0_ce0 <= ap_const_logic_1;
        else 
            output_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_0_d0 <= grp_fu_751_p4(28 downto 13);

    output_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_0_we0 <= ap_const_logic_1;
        else 
            output_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_address0 <= output_offset_cast_fu_330_p1(3 - 1 downto 0);

    output_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_1_ce0 <= ap_const_logic_1;
        else 
            output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_1_d0 <= add_ln52_1_fu_558_p2(28 downto 13);

    output_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_1_we0 <= ap_const_logic_1;
        else 
            output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_address0 <= output_offset_cast_fu_330_p1(3 - 1 downto 0);

    output_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_2_ce0 <= ap_const_logic_1;
        else 
            output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_2_d0 <= add_ln52_2_fu_586_p2(28 downto 13);

    output_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_2_we0 <= ap_const_logic_1;
        else 
            output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_address0 <= output_offset_cast_fu_330_p1(3 - 1 downto 0);

    output_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_3_ce0 <= ap_const_logic_1;
        else 
            output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_3_d0 <= add_ln52_3_fu_614_p2(28 downto 13);

    output_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_3_we0 <= ap_const_logic_1;
        else 
            output_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_address0 <= output_offset_cast_fu_330_p1(3 - 1 downto 0);

    output_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_4_ce0 <= ap_const_logic_1;
        else 
            output_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_4_d0 <= add_ln52_4_fu_642_p2(28 downto 13);

    output_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_4_we0 <= ap_const_logic_1;
        else 
            output_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_address0 <= output_offset_cast_fu_330_p1(3 - 1 downto 0);

    output_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_5_ce0 <= ap_const_logic_1;
        else 
            output_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_5_d0 <= add_ln52_5_fu_670_p2(28 downto 13);

    output_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_5_we0 <= ap_const_logic_1;
        else 
            output_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_6_address0 <= output_offset_cast_fu_330_p1(3 - 1 downto 0);

    output_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_6_ce0 <= ap_const_logic_1;
        else 
            output_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_6_d0 <= add_ln52_6_fu_698_p2(28 downto 13);

    output_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_6_we0 <= ap_const_logic_1;
        else 
            output_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_7_address0 <= output_offset_cast_fu_330_p1(3 - 1 downto 0);

    output_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_7_ce0 <= ap_const_logic_1;
        else 
            output_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_7_d0 <= add_ln52_7_fu_734_p2(28 downto 13);

    output_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_7_we0 <= ap_const_logic_1;
        else 
            output_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_offset_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_offset_read_reg_1203),64));
    sext_ln50_10_fu_381_p0 <= input2_q0;
        sext_ln50_10_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_10_fu_381_p0),29));

    sext_ln50_11_fu_385_p0 <= input2_q0;
        sext_ln50_11_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_11_fu_385_p0),17));

    sext_ln50_13_fu_393_p0 <= input3_q0;
        sext_ln50_13_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_13_fu_393_p0),29));

    sext_ln50_15_fu_401_p0 <= input3_q0;
        sext_ln50_15_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_15_fu_401_p0),17));

    sext_ln50_17_fu_409_p0 <= input4_q0;
        sext_ln50_17_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_17_fu_409_p0),29));

    sext_ln50_19_fu_417_p0 <= input4_q0;
        sext_ln50_19_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_19_fu_417_p0),17));

    sext_ln50_21_fu_425_p0 <= input5_q0;
        sext_ln50_21_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_21_fu_425_p0),28));

    sext_ln50_22_fu_429_p0 <= input5_q0;
        sext_ln50_22_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_22_fu_429_p0),29));

    sext_ln50_23_fu_433_p0 <= input5_q0;
        sext_ln50_23_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_23_fu_433_p0),17));

    sext_ln50_25_fu_441_p0 <= input6_q0;
        sext_ln50_25_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_25_fu_441_p0),28));

    sext_ln50_26_fu_445_p0 <= input6_q0;
        sext_ln50_26_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_26_fu_445_p0),29));

    sext_ln50_27_fu_449_p0 <= input6_q0;
        sext_ln50_27_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_27_fu_449_p0),17));

    sext_ln50_2_fu_349_p0 <= input_r_q0;
        sext_ln50_2_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_2_fu_349_p0),29));

    sext_ln50_30_fu_461_p0 <= input7_q0;
        sext_ln50_30_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_30_fu_461_p0),17));

        sext_ln50_31_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln50_fu_465_p2),18));

        sext_ln50_32_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln50_1_fu_475_p2),18));

        sext_ln50_34_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln50_3_fu_495_p2),18));

        sext_ln50_35_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln50_4_fu_505_p2),18));

    sext_ln50_3_fu_353_p0 <= input_r_q0;
        sext_ln50_3_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_3_fu_353_p0),17));

    sext_ln50_40_fu_535_p0 <= input7_q0;
        sext_ln50_40_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_40_fu_535_p0),28));

    sext_ln50_5_fu_361_p0 <= input1_q0;
        sext_ln50_5_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_5_fu_361_p0),28));

    sext_ln50_6_fu_365_p0 <= input1_q0;
        sext_ln50_6_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_6_fu_365_p0),29));

    sext_ln50_7_fu_369_p0 <= input1_q0;
        sext_ln50_7_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_7_fu_369_p0),17));

    sext_ln50_9_fu_377_p0 <= input2_q0;
        sext_ln50_9_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_9_fu_377_p0),28));

        sext_ln52_10_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1185_p3),29));

        sext_ln52_1_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_792_p3),29));

        sext_ln52_8_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1140_p3),29));

        sext_ln52_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_783_p3),29));

end behav;
